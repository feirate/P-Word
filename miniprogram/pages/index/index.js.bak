const app = getApp()
// 引入安全服务模块
const security = require('../../services/security.js')
// 引入高质量录音服务模块
const audioService = require('../../services/audioService.js')
// 引入智能语料库服务模块
const sentenceService = require('../../services/sentenceService.js')
// 引入云数据同步服务模块
const cloudService = require('../../services/cloudService.js')
// 引入语音朗读服务模块
const ttsService = require('../../services/ttsService.js')

Page({
  data: {
    // 基础数据
    currentDate: '',
    todayPracticeTime: 0,
    
    // 句子相关
    currentSentence: null,
    currentIndex: 0,
    totalSentences: 0,
    showTranslation: false,
    
    // 语料库相关
    availableCategories: [],
    selectedCategory: '',
    recommendationMode: 'smart', // 'smart', 'sequential', 'random'
    
    // 云同步相关
    syncStatus: {
      isOnline: true,
      queueLength: 0,
      lastSyncTime: 0
    },
    showSyncIndicator: false,
    
    // 录音相关
    isRecording: false,
    hasRecording: false,
    recordAuth: false,
    recordDuration: 0,
    recordDurationText: '00:00',
    audioPath: '',
    
    // 波形相关
    canvasWidth: 0,
    canvasHeight: 60,
    waveData: [],
    
    // 录音质量分析
    audioQuality: null,
    showQualityTip: false,
    
    // 练习统计
    practiceStats: {
      sentenceCount: 0,
      totalTime: 0,
      bestScore: null
    },
    
    // UI状态
    showAuthModal: false,
    
    // 游戏化数据
    practiceStreak: 0,           // 连续练习天数
    dailyGoal: 20,               // 日常目标句数
    goalPercentage: 0,           // 目标完成百分比
    todayAchievements: [],       // 今日获得的成就
    difficultyStars: '',         // 难度星星显示
    
    // TTS 相关
    isTTSPlaying: false,         // TTS播放状态
    autoPlayEnabled: true,       // 自动朗读功能
  },

  onLoad() {
    console.log('📱 练习页面加载')
    
    // 【安全】清理过期数据
    security.cleanExpiredData()
    
    // 初始化页面数据
    this.initPageData()
    
    // 检查录音权限
    this.checkRecordAuth()
    
    // 根据权限状态初始化音频服务
    if (app.globalData.recordAuth) {
      this.initAudioService()
      console.log('✅ 已有录音权限，音频服务已初始化')
    } else {
      console.log('⚠️ 暂无录音权限，等待用户授权后再初始化音频服务')
    }
    
    // 初始化Canvas
    this.initCanvas()
    
    // 初始化语料库系统
    this.initSentenceSystem()
    
    // 初始化云同步服务
    this.initCloudSync()
    
    // 加载今日统计（使用安全存储）
    this.loadTodayStats()
    
    // 初始化游戏化数据
    this.initGameData()
    
    // 绘制进度环
    this.drawProgressRing()
    
    // 加载TTS设置
    this.loadTTSSettings()
  },

  onShow() {
    // 页面显示时更新数据
    this.loadTodayStats()
  },

  // 初始化页面数据
  initPageData() {
    const date = new Date()
    const year = date.getFullYear()
    const month = (date.getMonth() + 1).toString().padStart(2, '0')
    const day = date.getDate().toString().padStart(2, '0')
    const currentDate = `${year}.${month}.${day}`
    this.setData({ currentDate })
  },

  // 检查录音权限
  checkRecordAuth() {
    const recordAuth = app.globalData.recordAuth
    this.setData({ recordAuth })
    
    if (!recordAuth) {
      console.log('⚠️ 录音权限未授权')
    }
  },

  // 初始化高质量录音服务
  initAudioService() {
    // 设置录音服务事件回调
    audioService.setEventHandlers({
      onRecordStart: () => {
        console.log('🎤 高质量录音开始')
        this.setData({ 
          isRecording: true,
          recordDuration: 0,
          waveData: [],
          audioQuality: null
        })
        this.startRecordTimer()
      },
      
      onRecordStop: (result) => {
        console.log('🎤 录音完成:', result)
        
        // 分析录音质量
        const quality = audioService.analyzeAudioQuality()
        
        this.setData({
          isRecording: false,
          hasRecording: true,
          audioPath: result.tempFilePath,
          audioQuality: quality
        })
        
        this.stopRecordTimer()
        this.saveRecordingStats(result)
        
        // 显示录音质量提示
        if (quality) {
          this.showQualityFeedback(quality)
        }
      },
      
      onFrameRecorded: (waveData) => {
        this.updateWaveform(waveData)
      },
      
      onRecordError: (error) => {
        console.error('🎤 录音错误:', error)
        this.setData({ isRecording: false })
        wx.showToast({
          title: '录音失败，请重试',
          icon: 'none',
          duration: 2000
        })
      },
      
      onPlayStart: () => {
        console.log('▶️ 开始播放录音')
        // 可以添加播放状态UI
      },
      
      onPlayEnd: () => {
        console.log('⏹️ 播放结束')
        // 可以添加播放结束UI
      },
      
      onPlayError: (error) => {
        console.error('❌ 播放失败:', error)
        wx.showToast({
          title: '播放失败',
          icon: 'none'
        })
      }
    })
  },

  // 初始化Canvas（增强版）
  initCanvas() {
    // 延迟执行，确保DOM已渲染
    setTimeout(() => {
      const query = this.createSelectorQuery()
      query.select('#waveCanvas').boundingClientRect((rect) => {
        if (rect && rect.width > 0 && rect.height > 0) {
          this.setData({
            canvasWidth: rect.width,
            canvasHeight: rect.height
          })
          console.log(`✅ Canvas初始化成功: ${rect.width}x${rect.height}`)
        } else {
          console.warn('⚠️ Canvas初始化失败，使用默认尺寸')
          // 使用默认尺寸
          this.setData({
            canvasWidth: 300,
            canvasHeight: 100
          })
        }
      }).exec()
    }, 100) // 延迟100ms
  },

  // 开始录音
  startRecording() {
    console.log('🎤 startRecording 被调用', {
      recordAuth: this.data.recordAuth,
      isRecording: this.data.isRecording
    })
    
    if (!this.data.recordAuth) {
      console.log('❌ 没有录音权限，显示授权弹窗')
      this.showAuthModal()
      return
    }
    
    const success = audioService.startRecording()
    console.log('🎤 录音启动结果:', success)
    
    if (!success) {
      wx.showToast({
        title: '录音启动失败',
        icon: 'none'
      })
    }
  },

  // 停止录音
  stopRecording() {
    console.log('🎤 stopRecording 被调用', {
      isRecording: this.data.isRecording
    })
    
    if (this.data.isRecording) {
      const success = audioService.stopRecording()
      console.log('🎤 录音停止结果:', success)
    } else {
      console.log('⚠️ 当前没有录音进行中')
    }
    
    // 检查录音质量成就
    setTimeout(() => {
      this.checkTodayAchievements()
    }, 1000)
  },

  // 播放录音
  async playRecording() {
    if (!this.data.hasRecording) {
      wx.showToast({
        title: '暂无录音',
        icon: 'none'
      })
      return
    }
    
    try {
      await audioService.playRecording()
    } catch (error) {
      console.error('播放失败:', error)
    }
  },

  // 重新录音
  reRecord() {
    // 清理录音服务状态
    audioService.cleanup()
    
    this.setData({
      hasRecording: false,
      audioPath: '',
      waveData: [],
      audioQuality: null
    })
  },

  // 切换句子
  switchSentence() {
    const nextSentence = this.getNextSentence()
    
    if (nextSentence) {
      this.setData({
        currentSentence: nextSentence,
        showTranslation: false
      })
      
      // 更新难度星星显示
      this.updateDifficultyStars()
      
      console.log(`🔄 切换到句子: [${nextSentence.level}] ${nextSentence.content}`)
      
      // 自动朗读新句子
      if (this.data.autoPlayEnabled) {
        setTimeout(() => {
          this.playTextToSpeech()
        }, 500) // 延迟0.5秒让用户适应
      }
    }
    
    // 清除当前录音
    this.setData({
      hasRecording: false,
      audioPath: '',
      waveData: [],
      audioQuality: null
    })
    
    // 更新游戏化数据
    this.updateGoalProgress()
    this.updateStreak()
    this.checkTodayAchievements()
  },

  // 更新难度星星显示
  updateDifficultyStars: function() {
    const { currentSentence } = this.data
    if (currentSentence && currentSentence.difficulty) {
      let stars = ''
      for (let i = 0; i < currentSentence.difficulty; i++) {
        stars += '★'
      }
      this.setData({ difficultyStars: stars })
    } else {
      this.setData({ difficultyStars: '' })
    }
  },

  // 切换翻译显示
  toggleTranslation() {
    this.setData({
      showTranslation: !this.data.showTranslation
    })
  },

  // 播放文本朗读（TTS）
  async playTextToSpeech() {
    const { currentSentence, isTTSPlaying } = this.data
    
    if (!currentSentence || !currentSentence.content) {
      console.warn('⚠️ 没有可朗读的句子')
      return
    }
    
    // 如果正在播放，则停止
    if (isTTSPlaying) {
      this.stopTextToSpeech()
      return
    }
    
    try {
      console.log('🔊 开始朗读:', currentSentence.content)
      
      // 更新播放状态
      this.setData({ isTTSPlaying: true })
      
      // 调用TTS服务
      const result = await ttsService.playText(currentSentence.content, {
        rate: 0.8, // 稍慢一点，便于学习
        volume: 0.9
      })
      
      if (result.success) {
        console.log('✅ TTS播放完成')
      } else {
        console.log('ℹ️ TTS播放结果:', result.message)
        let errorMessage = result.message || 'TTS功能暂不可用'
        if (errorMessage.includes('不支持') || errorMessage.includes('无法') || errorMessage.includes('播放失败')) {
          errorMessage = '当前环境不支持语音播放功能'
        }
        wx.showToast({
          title: errorMessage,
          icon: 'none',
          duration: 2000
        })
      }
      
    } catch (error) {
      console.error('❌ TTS播放失败:', error)
      wx.showToast({
        title: '当前环境不支持语音播放功能',
        icon: 'none',
        duration: 2000
      })
    } finally {
      // 重置播放状态
      this.setData({ isTTSPlaying: false })
    }
  },

  // 停止文本朗读
  stopTextToSpeech() {
    try {
      ttsService.stopCurrent()
      this.setData({ isTTSPlaying: false })
      console.log('⏹️ TTS播放已停止')
    } catch (error) {
      console.error('❌ 停止TTS时出错:', error)
    }
  },

  // 切换自动朗读功能
  toggleAutoPlay() {
    const newAutoPlayEnabled = !this.data.autoPlayEnabled
    this.setData({ autoPlayEnabled: newAutoPlayEnabled })
    
    // 保存设置到本地存储
    wx.setStorageSync('autoPlayEnabled', newAutoPlayEnabled)
    
    const message = newAutoPlayEnabled ? '已开启自动朗读' : '已关闭自动朗读'
    wx.showToast({
      title: message,
      icon: 'success',
      duration: 1500
    })
    
    console.log(`⚙️ 自动朗读功能: ${newAutoPlayEnabled ? '开启' : '关闭'}`)
  },

  // 加载TTS设置
  loadTTSSettings() {
    try {
      const autoPlayEnabled = wx.getStorageSync('autoPlayEnabled')
      if (autoPlayEnabled !== undefined && autoPlayEnabled !== null) {
        this.setData({ autoPlayEnabled })
        console.log(`📱 已加载自动朗读设置: ${autoPlayEnabled ? '开启' : '关闭'}`)
      }
    } catch (error) {
      console.warn('⚠️ 加载TTS设置失败:', error)
    }
  },

  // 开始录音计时
  startRecordTimer() {
    this.recordTimer = setInterval(() => {
      const duration = this.data.recordDuration + 1
      const minutes = Math.floor(duration / 60)
      const seconds = duration % 60
      const timeText = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`
      
      this.setData({
        recordDuration: duration,
        recordDurationText: timeText
      })
    }, 1000)
  },

  // 停止录音计时
  stopRecordTimer() {
    if (this.recordTimer) {
      clearInterval(this.recordTimer)
    }
  },

  // 更新波形显示（优化版）
  updateWaveform(waveData) {
    // 直接使用音频服务处理过的高质量波形数据
    this.setData({ waveData })
    this.drawWaveform()
  },

  // 绘制波形（增强版，修复Canvas 2D兼容性）
  drawWaveform() {
    const { canvasWidth, canvasHeight, waveData } = this.data
    
    if (!canvasWidth || waveData.length === 0) return
    
    // 优先使用Canvas 2D API，回退到旧版API
    this.createSelectorQuery()
      .select('#waveCanvas')
      .fields({
        node: true,
        size: true
      })
      .exec((res) => {
        if (res[0] && res[0].node) {
          // 使用新的Canvas 2D API
          this.drawWaveformNew(res[0])
        } else {
          // 回退到旧版Canvas API
          this.drawWaveformLegacy()
        }
      })
  },

  // 新版Canvas 2D绘制
  drawWaveformNew(canvasInfo) {
    const { canvasWidth, canvasHeight, waveData } = this.data
    
    // 检查canvas节点是否有效
    if (!canvasInfo || !canvasInfo.node) {
      console.warn('⚠️ Canvas节点无效，回退到旧版API')
      this.drawWaveformLegacy()
      return
    }
    
    const canvas = canvasInfo.node
    const ctx = canvas.getContext('2d')
    
    // 检查context是否有效
    if (!ctx) {
      console.warn('⚠️ Canvas context获取失败，回退到旧版API')
      this.drawWaveformLegacy()
      return
    }
    
    // 设置画布尺寸
    const dpr = (wx.getDeviceInfo && wx.getDeviceInfo().pixelRatio) || (wx.getAppBaseInfo && wx.getAppBaseInfo().pixelRatio) || 2
    canvas.width = canvasWidth * dpr
    canvas.height = canvasHeight * dpr
    ctx.scale(dpr, dpr)
    
    // 清除画布
    ctx.clearRect(0, 0, canvasWidth, canvasHeight)
    
    // 绘制背景网格
    ctx.strokeStyle = 'rgba(74, 144, 226, 0.1)'
    ctx.lineWidth = 1
    for (let i = 0; i <= 4; i++) {
      const y = (canvasHeight / 4) * i
      ctx.beginPath()
      ctx.moveTo(0, y)
      ctx.lineTo(canvasWidth, y)
      ctx.stroke()
    }
    
    // 设置波形样式
    ctx.strokeStyle = '#4A90E2'
    ctx.fillStyle = 'rgba(74, 144, 226, 0.3)'
    ctx.lineWidth = 2
    ctx.lineCap = 'round'
    
    // 绘制波形区域
    const barWidth = canvasWidth / Math.max(waveData.length, 1)
    const centerY = canvasHeight / 2
    
    if (waveData.length > 0) {
      // 绘制填充区域
      ctx.beginPath()
      ctx.moveTo(0, centerY)
      
      waveData.forEach((amplitude, index) => {
        const x = index * barWidth
        const height = amplitude * (canvasHeight * 0.7)
        ctx.lineTo(x, centerY - height / 2)
      })
      
      waveData.slice().reverse().forEach((amplitude, index) => {
        const x = (waveData.length - 1 - index) * barWidth
        const height = amplitude * (canvasHeight * 0.7)
        ctx.lineTo(x, centerY + height / 2)
      })
      
      ctx.closePath()
      ctx.fill()
      
      // 绘制波形线条
      ctx.beginPath()
      waveData.forEach((amplitude, index) => {
        const x = index * barWidth
        const height = amplitude * (canvasHeight * 0.7)
        
        if (index === 0) {
          ctx.moveTo(x, centerY - height / 2)
        } else {
          ctx.lineTo(x, centerY - height / 2)
        }
      })
      ctx.stroke()
    }
  },

  // 旧版Canvas API绘制（兼容性回退）
  drawWaveformLegacy() {
    const { canvasWidth, canvasHeight, waveData } = this.data
    const ctx = wx.createCanvasContext('waveCanvas', this)
    
    // 清除画布
    ctx.clearRect(0, 0, canvasWidth, canvasHeight)
    
    // 绘制背景网格
    ctx.setStrokeStyle('rgba(74, 144, 226, 0.1)')
    ctx.setLineWidth(1)
    for (let i = 0; i <= 4; i++) {
      const y = (canvasHeight / 4) * i
      ctx.beginPath()
      ctx.moveTo(0, y)
      ctx.lineTo(canvasWidth, y)
      ctx.stroke()
    }
    
    // 设置波形样式
    ctx.setStrokeStyle('#4A90E2')
    ctx.setFillStyle('rgba(74, 144, 226, 0.3)')
    ctx.setLineWidth(2)
    ctx.setLineCap('round')
    
    // 绘制波形区域
    const barWidth = canvasWidth / Math.max(waveData.length, 1)
    const centerY = canvasHeight / 2
    
    if (waveData.length > 0) {
      // 绘制填充区域
      ctx.beginPath()
      ctx.moveTo(0, centerY)
      
      waveData.forEach((amplitude, index) => {
        const x = index * barWidth
        const height = amplitude * (canvasHeight * 0.7)
        ctx.lineTo(x, centerY - height / 2)
      })
      
      waveData.slice().reverse().forEach((amplitude, index) => {
        const x = (waveData.length - 1 - index) * barWidth
        const height = amplitude * (canvasHeight * 0.7)
        ctx.lineTo(x, centerY + height / 2)
      })
      
      ctx.closePath()
      ctx.fill()
      
      // 绘制波形线条
      ctx.beginPath()
      waveData.forEach((amplitude, index) => {
        const x = index * barWidth
        const height = amplitude * (canvasHeight * 0.7)
        
        if (index === 0) {
          ctx.moveTo(x, centerY - height / 2)
        } else {
          ctx.lineTo(x, centerY - height / 2)
        }
      })
      ctx.stroke()
    }
    
    ctx.draw()
  },

  // 初始化语料库系统
  async initSentenceSystem() {
    try {
      console.log('🚀 初始化语料库系统...')
      
      // 等待语料库加载完成
      await sentenceService.initService()
      
      // 获取可用分类
      const categories = sentenceService.getAllCategories()
      
      // 获取推荐句子
      const recommendedSentence = sentenceService.getRecommendedSentence()
      
      // 更新页面数据
      this.setData({
        currentSentence: recommendedSentence,
        totalSentences: sentenceService.getTotalCount(),
        availableCategories: categories
      })
      
      // 更新难度星星显示
      this.updateDifficultyStars()
      
      console.log('✅ 语料库系统初始化完成')
      console.log(`📊 语料库统计: ${sentenceService.getTotalCount()} 句，${categories.length} 个分类`)
      
    } catch (error) {
      console.error('❌ 语料库系统初始化失败:', error)
      
      // 使用备用句子
      this.setData({
        currentSentence: {
          id: 'fallback_001',
          content: 'Hello, how are you?',
          translation: '你好，你好吗？',
          level: '初级',
          category: '问候',
          difficulty: 1
        },
        totalSentences: 1,
        availableCategories: ['问候']
      })
      
      // 更新难度星星显示
      this.updateDifficultyStars()
    }
  },

  // 获取下一个推荐句子
  getNextSentence() {
    const { recommendationMode, selectedCategory, currentSentence } = this.data
    let nextSentence = null
    const currentSentenceId = currentSentence ? currentSentence.id : null

    switch (recommendationMode) {
      case 'smart':
        // 智能推荐（考虑用户水平、练习历史等，排除当前句子）
        let attempts = 0
        do {
          nextSentence = sentenceService.getRecommendedSentence({
            excludeCompleted: attempts === 0, // 第一次尝试排除已完成的
            smartRecommend: true
          })
          attempts++
        } while (nextSentence && nextSentence.id === currentSentenceId && attempts < 5)
        break
        
      case 'category':
        // 按分类筛选，排除当前句子
        if (selectedCategory) {
          const categorySentences = sentenceService.getSentencesByCategory(selectedCategory)
            .filter(s => s.id !== currentSentenceId) // 排除当前句子
          if (categorySentences.length > 0) {
            const randomIndex = Math.floor(Math.random() * categorySentences.length)
            nextSentence = categorySentences[randomIndex]
          }
        } else {
          // 没有选择分类时，从所有句子中随机选择（排除当前句子）
          const allSentences = sentenceService.sentences.filter(s => s.id !== currentSentenceId)
          if (allSentences.length > 0) {
            const randomIndex = Math.floor(Math.random() * allSentences.length)
            nextSentence = allSentences[randomIndex]
          }
        }
        break
        
      case 'sequential':
        // 顺序练习
        const currentIndex = this.data.currentIndex
        const totalSentences = sentenceService.getTotalCount()
        const nextIndex = (currentIndex + 1) % totalSentences
        nextSentence = sentenceService.sentences[nextIndex]
        this.setData({ currentIndex: nextIndex })
        break
        
      default:
        // 随机选择（排除当前句子）
        const randomSentences = sentenceService.sentences.filter(s => s.id !== currentSentenceId)
        if (randomSentences.length > 0) {
          const randomIndex = Math.floor(Math.random() * randomSentences.length)
          nextSentence = randomSentences[randomIndex]
        }
    }

    // 如果没有找到合适的句子，fallback到第一个不同的句子
    if (!nextSentence || nextSentence.id === currentSentenceId) {
      const fallbackSentences = sentenceService.sentences.filter(s => s.id !== currentSentenceId)
      nextSentence = fallbackSentences[0] || sentenceService.sentences[0]
    }

    return nextSentence
  },

  // 【安全】保存录音统计（使用加密存储）
  saveRecordingStats(recordResult) {
    const { recordDuration, currentSentence, audioQuality } = this.data
    
    if (!currentSentence) {
      console.warn('⚠️ 当前句子为空，跳过统计保存')
      return
    }
    
    // 获取当前统计
    const currentStats = security.secureGet('practice_stats') || {
      sentenceCount: 0,
      totalTime: 0,
      bestScore: null,
      lastPracticeDate: null
    }
    
    // 更新统计数据
    const updatedStats = {
      ...currentStats,
      sentenceCount: currentStats.sentenceCount + 1,
      totalTime: currentStats.totalTime + recordDuration,
      bestScore: Math.max(currentStats.bestScore || 0, audioQuality && audioQuality.quality || 0),
      lastPracticeDate: new Date().toISOString(),
      // 【隐私保护】不保存具体录音内容，仅保存统计信息
      version: '1.0',
      timestamp: Date.now()
    }
    
    // 【安全】使用加密存储
    security.secureStorage('practice_stats', updatedStats)
    
    // 记录到语料库服务的练习历史
    const practiceRecord = {
      sentenceId: currentSentence.id,
      category: currentSentence.category,
      difficulty: currentSentence.difficulty || 1,
      quality: audioQuality && audioQuality.quality || 60,
      duration: recordDuration
    }
    
    sentenceService.recordPractice(practiceRecord)
    
    // 同步练习记录到云端
    this.syncPracticeToCloud(practiceRecord)
    
    // 更新页面显示
    this.setData({
      practiceStats: updatedStats,
      todayPracticeTime: updatedStats.totalTime
    })
    
    console.log('📊 练习统计已保存（加密）')
    console.log('📝 练习历史已记录到语料库服务')
  },

  // 【安全】加载今日统计（使用安全读取）
  loadTodayStats() {
    const stats = security.secureGet('practice_stats')
    
    if (stats && security.checkDataIntegrity(stats)) {
      this.setData({
        practiceStats: stats,
        todayPracticeTime: stats.totalTime || 0
      })
      console.log('📊 练习统计已加载（解密）')
    } else {
      console.log('📊 无有效统计数据')
    }
  },

  // 显示权限申请弹框
  showAuthModal() {
    this.setData({ showAuthModal: true })
  },

  // 隐藏权限申请弹框
  hideAuthModal() {
    this.setData({ showAuthModal: false })
  },

  // 申请权限（增强隐私说明）
  async requestAuth() {
    try {
      // 【隐私保护】详细说明权限用途
      const modalResult = await wx.showModal({
        title: '录音权限说明',
        content: '我们需要录音权限用于英语口语练习功能。录音文件仅在您的设备本地处理，不会上传到服务器或收集您的个人信息。',
        showCancel: true,
        confirmText: '同意',
        cancelText: '取消'
      })
      
      if (!modalResult.confirm) {
        this.setData({ showAuthModal: false })
        return
      }
      
      const authResult = await app.requestRecordAuth()
      if (authResult) {
        this.setData({
          recordAuth: true,
          showAuthModal: false
        })
        
        // 权限获取成功后初始化音频服务
        this.initAudioService()
        
        wx.showToast({
          title: '权限获取成功',
          icon: 'success'
        })
        
        console.log('✅ 录音权限授权成功，音频服务已初始化')
      }
    } catch (error) {
      console.error('❌ 权限申请失败:', error)
      this.setData({ showAuthModal: false })
      
      // 显示更详细的错误信息
      wx.showModal({
        title: '权限获取失败',
        content: '无法获取录音权限，您可以稍后在设置页面手动开启',
        showCancel: false,
        confirmText: '知道了'
      })
    }
  },

  // 显示录音质量反馈
  showQualityFeedback(quality) {
    let title = '录音质量分析'
    let content = `总评分：${quality.quality}分\n`
    
    if (quality.quality >= 80) {
      title = '🎉 录音质量优秀'
      content += '音质清晰，录音效果很好！'
    } else if (quality.quality >= 60) {
      title = '👍 录音质量良好'
      content += '录音效果不错，继续保持！'
    } else {
      title = '💡 录音质量提示'
      const tips = []
      
      if (quality.avgVolume < 20) {
        tips.push('音量偏低，请靠近话筒')
      }
      if (quality.stability < 70) {
        tips.push('音量不够稳定，保持匀速说话')
      }
      if (quality.silenceRatio > 30) {
        tips.push('静音时间较长，说话更连贯')
      }
      if (quality.clippingRatio > 5) {
        tips.push('音量过大，请降低说话音量')
      }
      
      content += tips.length > 0 ? tips.join('\n') : '继续练习会更好！'
    }
    
    wx.showModal({
      title,
      content,
      showCancel: false,
      confirmText: '知道了'
    })
  },

  // 切换质量提示显示
  toggleQualityTip() {
    this.setData({
      showQualityTip: !this.data.showQualityTip
    })
  },

  // 切换推荐模式
  toggleRecommendationMode() {
    const modes = ['smart', 'category', 'random']
    const currentIndex = modes.indexOf(this.data.recommendationMode)
    const nextIndex = (currentIndex + 1) % modes.length
    const nextMode = modes[nextIndex]

    this.setData({
      recommendationMode: nextMode,
      selectedCategory: '' // 重置分类选择
    })

    const modeNames = {
      smart: '智能推荐',
      category: '分类筛选',
      random: '随机练习'
    }

    wx.showToast({
      title: `切换到${modeNames[nextMode]}`,
      icon: 'none',
      duration: 1500
    })

    console.log(`🔄 推荐模式切换到: ${nextMode}`)
  },

  // 选择分类
  selectCategory(e) {
    const category = e.currentTarget.dataset.category || ''
    
    this.setData({
      selectedCategory: category
    })

    // 根据选择的分类获取新句子
    if (this.data.recommendationMode === 'category') {
      const nextSentence = this.getNextSentence()
      if (nextSentence) {
        this.setData({
          currentSentence: nextSentence,
          showTranslation: false
        })
      }
    }

    const categoryName = category || '全部分类'
    console.log(`📂 选择分类: ${categoryName}`)
  },

  // 初始化云同步服务
  initCloudSync() {
    // 获取同步状态
    const syncStatus = cloudService.getSyncStatus()
    
    this.setData({
      syncStatus
    })
    
    // 启动时自动同步（如果启用）
    const cloudSettings = cloudService.getCloudSettings()
    if (cloudSettings.syncOnLaunch && syncStatus.isOnline) {
      this.performAutoSync()
    }
    
    console.log('☁️ 云同步服务已初始化')
  },

  // 同步练习记录到云端
  async syncPracticeToCloud(practiceRecord) {
    try {
      await cloudService.syncPracticeRecord(practiceRecord)
      
      // 更新同步状态
      const syncStatus = cloudService.getSyncStatus()
      this.setData({ syncStatus })
      
    } catch (error) {
      console.error('练习记录云同步失败:', error)
      // 显示同步失败指示器
      this.showSyncIndicator('failed')
    }
  },

  // 执行自动同步
  async performAutoSync() {
    if (!this.data.syncStatus.isOnline) {
      return
    }

    try {
      // 显示同步指示器
      this.showSyncIndicator('syncing')
      
      // 执行同步
      await cloudService.performFullSync()
      
      // 更新同步状态
      const syncStatus = cloudService.getSyncStatus()
      this.setData({ syncStatus })
      
      // 显示同步成功
      this.showSyncIndicator('success')
      
    } catch (error) {
      console.error('自动同步失败:', error)
      this.showSyncIndicator('failed')
    }
  },

  // 手动触发同步
  async manualSync() {
    const result = await cloudService.manualSync()
    
    if (result.success) {
      // 更新同步状态
      const syncStatus = cloudService.getSyncStatus()
      this.setData({ syncStatus })
      
      // 重新加载语料库服务数据（如果有云端更新）
      sentenceService.loadPracticeHistory()
    }
  },

  // 显示同步指示器
  showSyncIndicator(type) {
    const indicators = {
      syncing: { icon: '🔄', text: '同步中...' },
      success: { icon: '✅', text: '同步完成' },
      failed: { icon: '❌', text: '同步失败' }
    }
    
    const indicator = indicators[type]
    if (!indicator) return
    
    this.setData({
      showSyncIndicator: true,
      syncIndicator: indicator
    })
    
    // 3秒后自动隐藏
    setTimeout(() => {
      this.setData({ showSyncIndicator: false })
    }, 3000)
  },

  // 页面销毁时清理
  onUnload() {
    // 清理定时器
    if (this.recordTimer) {
      clearInterval(this.recordTimer)
    }
    
    // 清理录音服务
    audioService.cleanup()
    
    // 清理TTS服务资源
    if (ttsService && ttsService.destroy) {
      ttsService.destroy()
    }
    
    // 【安全】清理临时文件（24小时后）
    const tempFiles = wx.getStorageSync('temp_audio_files') || []
    const now = Date.now()
    const validFiles = tempFiles.filter(file => 
      now - file.timestamp < 24 * 60 * 60 * 1000 // 24小时
    )
    wx.setStorageSync('temp_audio_files', validFiles)
  },

  // 初始化游戏化数据
  initGameData: function() {
    try {
      // 获取练习连击数据
      const streakData = wx.getStorageSync('practiceStreak') || {
        count: 0,
        lastDate: null
      };
      
      const today = new Date().toDateString();
      const yesterday = new Date(Date.now() - 24 * 60 * 60 * 1000).toDateString();
      
      // 检查连击是否中断
      if (streakData.lastDate === yesterday || streakData.lastDate === today) {
        this.setData({ practiceStreak: streakData.count });
      } else {
        this.setData({ practiceStreak: 0 });
      }
      
      // 计算目标完成百分比
      this.updateGoalProgress();
      
      // 检查今日成就
      this.checkTodayAchievements();
      
    } catch (e) {
      console.error('初始化游戏化数据失败:', e);
    }
  },

  // 更新目标进度
  updateGoalProgress: function() {
    const { sentenceCount } = this.data.practiceStats;
    const { dailyGoal } = this.data;
    const percentage = Math.min(Math.round((sentenceCount / dailyGoal) * 100), 100);
    
    this.setData({ 
      goalPercentage: percentage 
    });
    
    // 重新绘制进度环
    this.drawProgressRing();
  },

  // 绘制进度环
  drawProgressRing: function() {
    // 延迟执行，确保DOM已渲染
    setTimeout(() => {
      const query = wx.createSelectorQuery();
      query.select('#progressRing')
        .fields({ node: true, size: true })
        .exec((res) => {
          if (res[0] && res[0].node) {
            const canvas = res[0].node;
            const ctx = canvas.getContext('2d');
            
            if (ctx) {
              const dpr = (wx.getDeviceInfo && wx.getDeviceInfo().pixelRatio) || wx.getAppBaseInfo?.()?.pixelRatio || 2;
              canvas.width = res[0].width * dpr;
              canvas.height = res[0].height * dpr;
              ctx.scale(dpr, dpr);
              
              this.animateProgressRing(ctx, res[0].width, res[0].height);
            } else {
              console.warn('⚠️ 进度环Canvas context获取失败');
            }
          } else {
            console.warn('⚠️ 进度环Canvas节点获取失败');
          }
        });
    }, 200); // 延迟200ms
  },

  // 进度环动画
  animateProgressRing: function(ctx, width, height) {
    const centerX = width / 2;
    const centerY = height / 2;
    const radius = Math.min(width, height) / 2 - 6;
    const { goalPercentage } = this.data;
    
    let currentProgress = 0;
    const targetProgress = goalPercentage;
    const animationDuration = 1000; // 1秒动画
    const startTime = Date.now();
    const frameRate = 16; // 约60fps
    
    const animate = () => {
      const now = Date.now();
      const elapsed = now - startTime;
      const progress = Math.min(elapsed / animationDuration, 1);
      
      // 清除画布
      ctx.clearRect(0, 0, width, height);
      
      // 绘制背景圆环
      ctx.beginPath();
      ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI);
      ctx.strokeStyle = 'rgba(33, 150, 243, 0.1)';
      ctx.lineWidth = 8;
      ctx.stroke();
      
      // 绘制进度圆环
      currentProgress = targetProgress * progress;
      const angle = (currentProgress / 100) * 2 * Math.PI - Math.PI / 2;
      
      ctx.beginPath();
      ctx.arc(centerX, centerY, radius, -Math.PI / 2, angle);
      
      // 创建渐变
      const gradient = ctx.createLinearGradient(0, 0, width, height);
      gradient.addColorStop(0, '#2196F3');
      gradient.addColorStop(1, '#1976D2');
      
      ctx.strokeStyle = gradient;
      ctx.lineWidth = 8;
      ctx.lineCap = 'round';
      ctx.stroke();
      
      if (progress < 1) {
        // 使用setTimeout替代requestAnimationFrame
        setTimeout(animate, frameRate);
      }
    };
    
    animate();
  },

  // 检查今日成就
  checkTodayAchievements: function() {
    const { practiceStats, practiceStreak } = this.data;
    const achievements = [];
    
    // 检查各种成就条件
    if (practiceStats.sentenceCount >= 10 && practiceStats.sentenceCount % 10 === 0) {
      achievements.push({ id: 'sentences_10', icon: '🎯' });
    }
    
    if (practiceStreak >= 7) {
      achievements.push({ id: 'streak_7', icon: '🔥' });
    }
    
    if (practiceStats.bestScore >= 90) {
      achievements.push({ id: 'quality_master', icon: '🎵' });
    }
    
    if (practiceStats.totalTime >= 30) {
      achievements.push({ id: 'time_master', icon: '⭐' });
    }
    
    this.setData({ todayAchievements: achievements });
  },

  // 更新连击数据
  updateStreak: function() {
    try {
      const today = new Date().toDateString();
      let streakData = wx.getStorageSync('practiceStreak') || {
        count: 0,
        lastDate: null
      };
      
      if (streakData.lastDate !== today) {
        const yesterday = new Date(Date.now() - 24 * 60 * 60 * 1000).toDateString();
        
        if (streakData.lastDate === yesterday) {
          // 连续练习
          streakData.count += 1;
        } else {
          // 重新开始
          streakData.count = 1;
        }
        
        streakData.lastDate = today;
        wx.setStorageSync('practiceStreak', streakData);
        
        this.setData({ practiceStreak: streakData.count });
      }
    } catch (e) {
      console.error('更新连击数据失败:', e);
    }
  },

  // 快捷操作方法
  goToHistory: function() {
    wx.navigateTo({
      url: '/pages/history/history'
    });
  },

  goToLibrary: function() {
    wx.navigateTo({
      url: '/pages/library/library'
    });
  },

  goToSettings: function() {
    wx.navigateTo({
      url: '/pages/settings/settings'
    });
  },

  shareProgress: function() {
    const { practiceStats, practiceStreak } = this.data;
    
    wx.showShareMenu({
      withShareTicket: true,
      menus: ['shareAppMessage', 'shareTimeline']
    });
    
    // 可以添加分享逻辑
    wx.showToast({
      title: '分享功能开发中',
      icon: 'none'
    });
  },
}) 